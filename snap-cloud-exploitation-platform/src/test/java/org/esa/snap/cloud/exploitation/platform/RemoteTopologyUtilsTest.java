package org.esa.snap.cloud.exploitation.platform;

import org.apache.commons.lang.StringUtils;
import org.esa.snap.cloud.exploitation.platform.topology.RemoteTopology;
import org.esa.snap.cloud.exploitation.platform.topology.RemoteTopologyUtils;
import org.json.simple.parser.ParseException;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

/**
 * @author Jean Coravu.
 */
public class RemoteTopologyUtilsTest extends AbstractTest {

    public RemoteTopologyUtilsTest() {
    }

    @Test
    public void testWriteAndReadTopology() throws IOException, GeneralSecurityException, ParseException {
        Path remoteTopologyFilePath = this.cloudExploitationPlatformTestsFolderPath.resolve("remote-topology.json");
        try {
            RemoteMachineCredentials remoteMachineSaved = new RemoteMachineCredentials();
            remoteMachineSaved.setHostName("127.0.0.1");
            remoteMachineSaved.setPortNumber(123);
            remoteMachineSaved.setUsername("username");
            remoteMachineSaved.setPassword("password");
            remoteMachineSaved.setOperatingSystemName("Linux");
            remoteMachineSaved.setSharedFolderPath("/home/username/remote-shared");
            remoteMachineSaved.setGPTFilePath(null);

            RemoteTopology remoteTopologySaved = new RemoteTopology("//192.168.60.245/shared", "guest", "guest");
            remoteTopologySaved.setLocalMachineData("/home/guest/local-shared", "1234567");
            remoteTopologySaved.addRemoteMachine(remoteMachineSaved);

            RemoteTopologyUtils.writeTopology(remoteTopologyFilePath, remoteTopologySaved);

            RemoteTopology remoteTopologyLoaded = RemoteTopologyUtils.readTopology(remoteTopologyFilePath);
            assertNotNull(remoteTopologyLoaded);

            assertEquals(remoteTopologySaved.getLocalPassword(), remoteTopologyLoaded.getLocalPassword());
            assertEquals(remoteTopologySaved.getLocalSharedFolderPath(), remoteTopologyLoaded.getLocalSharedFolderPath());
            assertEquals(remoteTopologySaved.getRemotePassword(), remoteTopologyLoaded.getRemotePassword());
            assertEquals(remoteTopologySaved.getRemoteSharedFolderURL(), remoteTopologyLoaded.getRemoteSharedFolderURL());
            assertEquals(remoteTopologySaved.getRemoteUsername(), remoteTopologyLoaded.getRemoteUsername());

            assertEquals(1, remoteTopologyLoaded.getRemoteMachines().size());

            RemoteMachineCredentials remoteMachineLoaded = remoteTopologyLoaded.getRemoteMachines().get(0);
            assertNotNull(remoteMachineLoaded);

            assertEquals(remoteMachineSaved.getHostName(), remoteMachineLoaded.getHostName());
            assertEquals(remoteMachineSaved.getPortNumber(), remoteMachineLoaded.getPortNumber());
            assertEquals(remoteMachineSaved.getGPTFilePath(), remoteMachineLoaded.getGPTFilePath());
            assertEquals(remoteMachineSaved.getOperatingSystemName(), remoteMachineLoaded.getOperatingSystemName());
            assertEquals(remoteMachineSaved.getPassword(), remoteMachineLoaded.getPassword());
            assertEquals(remoteMachineSaved.getUsername(), remoteMachineLoaded.getUsername());
            assertEquals(remoteMachineSaved.getSharedFolderPath(), remoteMachineLoaded.getSharedFolderPath());
        } finally {
            Files.delete(remoteTopologyFilePath);
        }
    }

    private static Path testDataAvailable() {
        String testDataDir = System.getProperty(PROPERTY_NAME_DATA_DIR);
        if (!StringUtils.isBlank(testDataDir)) {
            Path testFolderPath = Paths.get(testDataDir);
            if (Files.exists(testFolderPath)) {
                return testFolderPath;
            }
        }
        return null;
    }
}
